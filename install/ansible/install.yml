---
- name: Set up environment
  hosts: ampletracks_servers
  tasks:  
    - name: Distribution
      debug: msg="{{ ansible_distribution }}"
    - name: Distribution version
      debug: msg="{{ ansible_distribution_version}}"
    - name: Distribution major version
      debug: msg="{{ ansible_distribution_major_version }}"

    - name: Set up internal ansible "facts" for Debian
      when: ansible_distribution == "Debian"
      set_fact:
        base_distro: Debian
        admin_user: admin
        mysql_config_file_location: /etc/mysql/mariadb.conf.d/50-server.cnf 

    - name: Set up internal ansible "facts" for Ubuntu
      when: ansible_distribution == "Ubuntu"
      set_fact:
        base_distro: Debian
        admin_user: ubuntu
        mysql_config_file_location: /etc/mysql/mariadb.conf.d/50-server.cnf 

    - name: Set up internal ansible "facts" for Fedora
      when: ansible_distribution == "Fedora"
      set_fact:
        base_distro: RedHat
        admin_user: root
    
    - name: Fail if we dont recognise the Distro
      fail:
        msg: "Bailing out. Don't recognise your distro: {{ ansible_distribution }}"
      when: admin_user is undefined

    - name: Setup data for mandatory variables check
      set_fact:
        mandatory_vars:
          - { name: "admin_user",                   message: "ERROR: Don't recognise your distro: {{ ansible_distribution }}" }
          - { name: "ampletracks_domain_name",      message: "You must define ampletracks_domain_name for all hosts" }
          - { name: "ampletracks_first_user_email", message: "You must define the email address for the first user: ampletracks_first_user_email" }

    - name: Check that all mandatory variables are present
      fail:
        msg: "ERROR: {{ item.message }}"
      when: vars[item.name] is undefined
      loop: "{{ mandatory_vars }}"

    - name: Build install path
      set_fact:
        ampletracks_install_path: /var/www/{{ ampletracks_domain_name }}

    - name: Tell the user where Ampletracks will be installed
      pause:
        prompt: "\n\n\n\
                  ================================= IMPORTANT =====================================\n\
                  This playbook will install Ampletracks on the target server\n\
                    The site will be installed in: {{ ampletracks_install_path }}\n\
                  ==================================================================================\n\
                  \n\n\n\
                  Read the above then press enter to continue...
                "



- name: Set up Ampletrack server
  hosts: ampletracks_servers
  remote_user: "{{ admin_user }}"
  become: yes
  become_method: sudo

  tasks:

    - name: Set system timezone
      shell: timedatectl set-timezone {{ timezone }}
      when: timezone is defined

    - name: Skipping timezone message
      debug:
        msg: Skipping timezone setting because timezone variable is not defined
      when: timezone is undefined

    # Weirdly /etc/apt/sources.list references  httpS://security.debian.org/ yet at the time of writing this
    # security.debian.org was not responding on port 443. So we convert this to http://security.debian.org/
    - name: Fix Debian sources bug
      replace:
        path: /etc/apt/sources.list
        regexp: 'https://security.debian.org/'
        replace: 'http://security.debian.org/'
      when: ansible_distribution == "Debian"

    - name: Update the apt cache
      when: base_distro=="Debian"
      apt:
        update_cache: yes
   
    - name: Update the dnf cache
      when: base_distro=="RedHat"
      dnf:
        update_cache: yes

    # Just install Mysql server on its own because we need to know if this changes (and secure the installation if it did)
    # We need to install python3-mysqldb on the server for tha ansible mysql module to work
    - name: Install Mysql Server on Debian
      when: base_distro=="Debian"
      apt:
        name: [
          mariadb-server,
          net-tools,
          python3-pymysql,
        ]
        state: present
      register: install_mysql

    - name: Install Mysql Server on RedHat
      when: base_distro=="RedHat"
      dnf:
        name: [
          mariadb-server,
          net-tools,
          python3-PyMySQL,
          python2-PyMySQL
        ]
        state: present
      register: install_mysql
    
    - name: Start MySQL service
      service:
        name: mariadb
        state: started

      # Find the mysqld.sock in a distro-independent way
    - shell: netstat -l --protocol=unix | grep mysqld.sock | rev | cut -d ' ' -f 1 | rev
      register: mysqld_socket

    # Things we need to do on initial install of mysql
    - name: Secure MySQL installation
      block:


      - name: create random 16 character password for MySQL just in case we need on
        set_fact:
          mysql_root_password: "{{ lookup('password', '/dev/null length=16') }}"
      
      - name: debug print password
        debug:
          msg: "Setting MySQL root Password to {{mysql_root_password}}"

      # see https://serverfault.com/questions/1026554/how-to-do-mysql-secure-installation-via-ansible-playbook
      - name: Update MariaDB root password
        mysql_user:
          name: root
          host: "{{item}}"
          password : "{{mysql_root_password}}"
          login_user: root
          login_password: ""
          # see https://www.claudiokuenzler.com/blog/1236/ansible-reset-mysql-root-password-unable-connect-check-login-user
          login_unix_socket: "{{ mysqld_socket.stdout }}"
          check_implicit_admin: yes
        with_items:
          - 127.0.0.1
          - ::1
          - localhost

      - name: Create ~/.my.cnf file
        copy:
          content: |
                   [client]
                   user=root
                   password={{mysql_root_password}}
          dest: /root/.my.cnf
          mode: 0600     

        # mysql_secure_installation
      - name: Delete anonymous MySQL user
        mysql_user:
          name: ""
          host: "{{item}}"
          state: absent
          check_implicit_admin: true
          login_unix_socket: "{{ mysqld_socket.stdout }}"
        with_items:
          - localhost
          - "{{ansible_nodename}}"

        # mysql_secure_installation
      - name: Delete Hostname based MySQL user
        mysql_user:
          name: "root"
          host: "{{ansible_nodename}}"
          state: absent
          login_unix_socket: "{{ mysqld_socket.stdout }}"

        # mysql_secure_installation
      - name: Remove MySQL test database
        mysql_db:
          name: "test"
          state: absent
          login_unix_socket: "{{ mysqld_socket.stdout }}"

      when: install_mysql.changed

    - name: Set sql_mode in MySQL config
      lineinfile:
        path: "{{ mysql_config_file_location }}"
        regexp: "^\\s*sql_mode"
        line: "sql_mode               = NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"

    # Install everything first so that the relevant users & groups are created for www etc
    - name: Install Apache, PHP etc on Debian
      when: base_distro=="Debian"
      apt:
        name: [
          cron,
          apache2,
          libapache2-mod-php,
          php,
          php-mysql,
          php-curl,
          php-gd,
          php-xml,
          git,
          wget
        ]
        state: present

    - name: Install Apache, PHP etc on RedHat
      when: base_distro=="RedHat"
      dnf:
        name: [
          cronie,
          httpd,
          libselinux-python,
          mod_ssl,
          php,
          php-common,
          php-mysqlnd,
          php-curl,
          php-gd,
          php-xml,
          php-json,
          git-all,
          wget
        ]
        state: present

    - name: Restart httpd for RedHat
      when: base_distro=="RedHat"
      service:
        name: httpd
        state: restarted
        enabled: yes
      # register: restart

    - name: Enable Apache2 mod_rewrite
      apache2_module: name=rewrite state=present

    - name: Enable Apache2 mod_ssl for Debian
      when: base_distro=="Debian"
      apache2_module: name=ssl state=present

 
    - name: Enable Apache2 mod_ssl for RedHat
      when: base_distro=="RedHat"
      apache2_module: name=ssl state=present

    - name: Enable Apache2 mod_headers
      apache2_module: name=headers state=present

    # --- PHP config ---
    - name: Find php.ini
      find:
        paths: '/etc'
        patterns: 'php.ini'
        recurse: yes
      register: php_ini

    - name: Found the following php.ini files
      debug:
        var: php_ini.files

    - name: Setup for PHP config file edits
      set_fact:
        php_config_tweaks:
          - { regexp: "^short_open_tag", line: "short_open_tag = On" }
          - { regexp: "^post_max_size", line: "post_max_size = 50M" }
          - { regexp: "^upload_max_filesize", line: "upload_max_filesize = 50M" }

    - name: Add in the timezone config if a timezone has been provided
      set_fact: 
          php_config_tweaks: '{{ php_config_tweaks + [ { "regexp" : "^date\.timezone", "line" : "date.timezone = {{timezone}}" } ] }}'
      when: timezone is defined

    - name: Lines to be changed in PHP config files
      debug:
        var: php_config_tweaks

    - name: Tweak PHP config files
      lineinfile:
        path: "{{ item.0.path }}"
        regexp: "{{ item.1.regexp }}"
        line: "{{ item.1.line }}"
      loop: "{{ php_ini.files | product(php_config_tweaks) | list }}"

    # Determine Apache group
    - name: Determine what group web server runs as if this has not been passed in
      when: ampletracks_www_data_group is undefined
      block:
        - name: Determine what group web server runs as
          shell: ps -eo comm,euser,supgrp | grep -E "apache|apache2|nginx" | grep -v "root" | uniq | rev | cut -d ' ' -f 1 | rev
          register: web_server_group
        
        - name: Store web server group
          set_fact:
            ampletracks_www_data_group: "{{ web_server_group.stdout }}"

    - name: ampletracks_www_data_group is set to
      debug:
        var: ampletracks_www_data_group

    # --- Clone the codebase ---
    - name: Default the ampletracks_db_name if it isn't defined
      set_fact:
        ampletracks_db_name: ampletracks
      when: ampletracks_db_name is undefined

    - name: Define site base directory
      set_fact:
        ampletracks_install_path: "/var/www/{{ ampletracks_domain_name }}"

    - name: Define site secret
      set_fact:
        site_secret: "{{ lookup('password', '/dev/null length=64') }}"

    - name: Escape user email
      set_fact:
        ampletracks_first_user_email_escaped: "{{ ampletracks_first_user_email | replace(\"'\", \"\\'\") }}"
    - name: Escape user email
      set_fact:
        ampletracks_first_user_email_escaped: "{{ ampletracks_first_user_email_escaped | replace('\"','\\\\\\\"') }}"

    - name: Determine if first user exists 
      shell: echo "SELECT id FROM user WHERE email = \"{{ampletracks_first_user_email_escaped}}\" AND deletedAt=0" | mysql {{ ampletracks_db_name }}
      ignore_errors: yes
      register: find_user_query_results

    - name: Debug
      debug:
        var: find_user_query_results
    
    - name: Create password for first user
      when: find_user_query_results.stdout=="" and ampletracks_first_user_password is undefined
      block:
        - name: Generate new random password
          set_fact:
            new_first_user_password: "{{ lookup('password', '/dev/null length=12') }}"

        - name: Tell the user the password we just created
          pause:
            prompt: "\n\n\n\
                      ================================= IMPORTANT =====================================\n\
                      You can log in to the new Ampletracks site with the following details:\n\
                        username: {{ ampletracks_first_user_email }}\n\
                        password: {{ new_first_user_password }}\n\n\
                      Once you are logged in via the web interface you can click \"My Account -> Settings\"
                      to change your password to something more memorable
                      
                      PLEASE RECORD THIS NEW PASSWORD SOMEWHERE AND THEN PRESS ENTER TO CONTINUE\n\
                      ==================================================================================\n\
                      \n\n\n\
                      Read the above then press enter to continue...
                    "
        
        - name: Actually save the new password
          set_fact:
            ampletracks_first_user_password: "{{ new_first_user_password }}"

    - name: Clone Ampletracks repository
      git:
        repo: https://github.com/Ampletracks/Ampletracks.git
        dest: "{{ ampletracks_install_path }}"
        version: "{{ ampletracks_version }}"

    - name: Build full path to ampletracks config file
      set_fact:
        ampletracks_config_file_location: "{{ ampletracks_install_path }}/config/{{ ampletracks_domain_name }}.php"

    - name: Set the lets_encrypt_admin_email if it isn't set
      set_fact:
        lets_encrypt_admin_email: ""
      when: lets_encrypt_admin_email is undefined

    - name: Set lets_encrypt_use_staging_environment if it isn't set
      set_fact:
        lets_encrypt_use_staging_environment: "false"
      when: lets_encrypt_use_staging_environment is undefined

    - name: Build ampletracks application config file
      template:
        src: ./files/ampletracksConfig.php
        dest: "{{ ampletracks_config_file_location }}"
        force: no
        owner: root
        group: "{{ ampletracks_www_data_group }}"
        mode: 0644

    - name: Build ampletracks apache config file
      template:
        src: ./files/ampletracksConfig.php
        dest: "{{ ampletracks_config_file_location }}"
        force: no
        owner: root
        group: "{{ ampletracks_www_data_group }}"
        mode: 0644


    - name: Build apache config file for Debian
      when: base_distro=="Debian"
      template:
        src: ./files/apacheVhost.conf
        dest: "/etc/apache2/sites-available/{{ ampletracks_domain_name }}.conf"
        force: no
        owner: root
        mode: 0644

    - name: Build apache config file for RedHat
      when: base_distro=="RedHat"
      block:
        - name: Check if /etc/httpd/sites-available exists
          stat:
            path: "/etc/httpd/sites-available"
          register: sites_available_data

        - name: Create /etc/httpd/sites-available
          when: not sites_available_data.exists
          file:
            path: "/etc/httpd/sites-available"
            state: directory

        - name: Build config file
          template:
            src: ./files/apacheVhost.conf
            dest: "/etc/httpd/sites-available/{{ ampletracks_domain_name }}.conf"
            force: no
            owner: root
            mode: 0644

    - name: "Enable the domain: {{ ampletracks_domain_name }} in Apache"
      command: a2ensite {{ ampletracks_domain_name }}
      args:
        creates: /etc/apache2/sites-enabled/{{ ampletracks_domain_name }}.conf

    - name: Restart apache for Debian
      when: base_distro=="Debian"
      service:
        name: apache2
        state: restarted

    - name: Restart MySQL(MariaDB)
      when: base_distro=="Debian"
      service:
        name: mariadb
        state: restarted

    - name: Restart httpd for RedHat
      when: base_distro=="RedHat"
      service:
        name: httpd
        state: restarted
        enabled: yes
      register: restart

    - name: Run Ampletracks installer script
      environment:
        FIRST_USER_EMAIL: "{{ ampletracks_first_user_email|default('') }}"
        FIRST_USER_PASSWORD: "{{ ampletracks_first_user_password|default('') }}"
      shell: php {{ ampletracks_install_path }}/scripts/install.php {{ ampletracks_config_file_location }}

    - name: Set crontab filename
      set_fact:
        crontab_filename: "/etc/cron.d/{{ ampletracks_domain_name | regex_replace('[^a-zA-Z0-9_-]', '_') }}"

    - name: Build crontab
      lineinfile:
        create: true
        path: "{{crontab_filename}}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        mode: 0311
      loop:
        - { regexp: "scripts/cron\\.sh minute", line: "* * * * * root {{ ampletracks_install_path }}/scripts/cron.sh minute {{ampletracks_domain_name}} >/dev/null 2>&1" }
        - { regexp: "scripts/cron\\.sh tenminute", line: "*/10 * * * * root {{ ampletracks_install_path }}/scripts/cron.sh tenminute {{ampletracks_domain_name}} >/dev/null 2>&1" }
        - { regexp: "scripts/cron\\.sh hour", line: "1 * * * * root {{ ampletracks_install_path }}/scripts/cron.sh hour {{ampletracks_domain_name}} >/dev/null 2>&1" }
        - { regexp: "scripts/cron\\.sh day", line: "3 2 * * * root {{ ampletracks_install_path }}/scripts/cron.sh day {{ampletracks_domain_name}} >/dev/null 2>&1" }

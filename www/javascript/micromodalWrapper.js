/*

The code below was generated by Chat GPT based on the following description:

 I would like to have a JavaScript function named modal that I can call with various options to create and display a modal popup on a webpage. This modal should utilize the MicroModal library for displaying the modal and jQuery for DOM manipulation. The function should be called as follows:

modal({
    text: <textual content for the body of the modal, displayed as plain text>,
    html: <HTML content or a jQuery object for the body of the modal>,
    title: <title text for the modal - optional>,
    events: {
      onClose: <function to call when the modal is closed, either via OK, Cancel, or any other close mechanism>,
      onOk: <function to call when the modal is closed with the OK button>,
      onCancel: <function to call when the modal is closed with the Cancel button>
    },
    buttons: [
        {
            position: <"left", "right", or "centre" - optional - defaults to right>
            text: <button text>
            onClick: <onClick handler - optional>]
        ...
    ]
});
Requirements and Behavior:

Events: All events (onClose, onOk, onCancel) are optional. If provided, these functions will be called with a data object containing values from any input fields present in the modal's HTML content. This data collection should occur before the modal content is deleted.
Buttons: If no buttons are provided, the default is to show just one OK button positioned on the right. Buttons can be customized with text, position, and an optional click handler. The onClick handler, if provided, will also be called with the input fields' data object.
Title: If a title is provided, it should be displayed as the modal's heading. If not provided, the heading for the modal should be omitted.
Content: Either the text or html option must be provided. If neither is provided, log an error to the console and do nothing. If both are provided, log an error to the console and prioritize the html content. The text should be displayed as plain text, not interpreted as HTML, to prevent potential security issues. If html is a jQuery object, use the HTML content from the first DOM object in the jQuery array as the modal's content.
HTML Content and Input Values: If HTML content is provided and includes any input fields, the values from these fields should be gathered into a data object. This object should then be passed to any specified event handlers (onOk, onCancel, and any custom button events) before the modal window content is deleted.
Title: If a jquery object is provided for title and no specific title is provided, then look for an element with class="title" inside the html content and if found, remove the element from the html and use the text content from this element as the title
*/

function modal(options) {
    // Validation for 'text' and 'html'
    if ((!options.text && !options.html) || (options.text && options.html)) {
        console.error("You must provide either 'text' or 'html' but not both.");
        return;
    }

    var contentBody;
    // Handle jQuery object for 'html'
    if (options.html && options.html instanceof jQuery) {
        if (!options.title && options.html.has('.title')) {
         options.html = options.html.clone();
         options.title = options.html.find('.title').remove().text();
        }
        contentBody = options.html.first().html(); // Use the HTML content from the first DOM object in the jQuery array
        // See if this contains a title and if so grab it
    } else if (options.html) {
        contentBody = options.html;
    } else if (options.text) {
        // Ensure that the 'text' option is displayed as plain text
        contentBody = $('<div>').text(options.text).html();
    }

    var modalId = 'custom-modal-' + Math.random().toString(36).substr(2, 9);

    var modalHTML = `
        <div class="modal micromodal-slide" id="${modalId}" aria-hidden="true">
            <div class="modal__overlay" tabindex="-1">
                <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="${modalId}-title">
                    <button class="modal__close" aria-label="Close modal" data-micromodal-close></button>
    `;

    if (options.title) {
        modalHTML += `
            <div class="modal__header">
                <h2>${options.title}</h2>
            </div>
        `;
    }

    modalHTML += `
                    <div class="modal__content" id="${modalId}-content">
                        ${contentBody}
                    </div>
    `;

    modalHTML += '<div class="modal__footer">';

    if (!options.buttons || options.buttons.length === 0) {
        options.buttons = [{
            align:'right',
            text:'OK'
         }]; // Default button if none provided
    }

    options.buttons.forEach(function(button, index) {
        var position = button.align || 'right', text = button.text;
        var extraClasses = button.extraClasses || ( text.toLowerCase()=='ok' ? 'modal__btn-primary' : '' );
        var buttonId = `${modalId}-btn-${index}`;
        modalHTML += `
            <button class="modal__btn modal__btn-${position} ${extraClasses}" id="${buttonId}"}>${text}</button>
        `;
    });

    modalHTML += '</div></div></div></div>';
    $('body').append(modalHTML);

    // Function to gather input values
    function gatherInputValues() {
        var inputs = $('#' + modalId + ' input');
        var data = {};
        inputs.each(function() {
            var input = $(this);
            data[input.attr('name')] = input.val();
        });
        return data;
    }

    // Initialize MicroModal
    MicroModal.show(modalId,{
        onClose: function(modal, element, event) {
            if (options.events && options.events.onClose) {
                var inputData = gatherInputValues();
                options.events.onClose(inputData);
            }
            $('#' + modalId).remove();
        },
        openTrigger: 'data-custom-open',
        closeTrigger: 'data-micromodal-close',
        disableScroll: true,
        disableFocus: false,
        awaitOpenAnimation: true,
        awaitCloseAnimation: true,
        debugMode: true
    });

    // Modified function to capture input data and call all provided handlers specifically
   options.buttons.forEach(function(button, index) {
      var buttonAttrib = button; // Capture the current button's options
      var buttonId = `${modalId}-btn-${index}`;
      $('#' + buttonId).on('click', function() {
         var inputData = gatherInputValues();
         var result;
         if (buttonAttrib.onClick) {
            // If an individual click handler is provided
            result = buttonAttrib.onClick(inputData);
         } else {
            // Update to ensure handling if a button text refers to default same logic
            var buttonActionText = buttonAttrib.text.toLowerCase(); // Example: makes sure we match 'ok' or 'cancel' in a case-insensitive manner
            if (buttonActionText === 'ok' && options.events && options.events.onOk) {
               result = options.events.onOk(inputData);
            } else if (buttonActionText === 'cancel' && options.events && options.events.onCancel) {
               result = options.events.onCancel(inputData);
            } else {
               result = true;
            }
         }
         if (result) {
            console.log(result,modalId);
            MicroModal.close(modalId);
         }
      });
   });
}

/* The following was generated from this prompt:

please write a helper function that uses this modal function to present a modal prompt interface.  The prompt function is called as follows:
prompt(text,onOk)
or
prompt(text,title,onOk)
*/

function prompt(text, title, onOk) {
    // Check if the title is not provided and adjust arguments accordingly
    if (typeof title === 'function') {
        onOk = title;
        title = ''; // Default title to empty if not provided
    }

    var modalId = 'prompt-modal-' + Math.random().toString(36).substr(2, 9); // Unique ID for the modal
    var inputId = modalId + '-input'; // Unique ID for the input field

    // HTML content for the prompt modal, including a text input
    var htmlContent = `
        <label for="${inputId}">${text}</label>
        <input type="text" id="${inputId}" name="response" style="width: 100%; margin-top: 10px;" />
    `;

    // Define the modal options
    var modalOptions = {
        title: title,
        html: htmlContent,
        buttons: [
            {align:'left', text:'Cancel' },
            {
               align:'right',
               text: 'OK',
               onClick: function(data) {
                  // Call onOk with the input value when OK is clicked
                  var inputValue = $('#' + inputId).val();
                  onOk(inputValue);
               }
            }
        ],
        events: {
            onClose: function(data) {
                // Optional close handler
            }
        }
    };

    // Call the modal function with the constructed options
    modal(modalOptions);
}

/* The following was generated from this prompt:

Please can you also create a helper function called "confirm" which presents a modal with "OK" and "Cancel" buttons. This is called as follows:
confirm(text,onOk);
or
confirm(text,title,onOk);
*/
function confirm(text, title, onOk) {
    // Adjust arguments if title is not provided
    if (typeof title === 'function') {
        onOk = title;
        title = ''; // Default title to empty if not provided
    }

    // Define the modal options
    var modalOptions = {
        title: title,
        html: text,
        buttons: [
            {align:'left', text:'Cancel'}, // No specific action needed, modal will close on cancel
            {align:'right', text:'OK', onClick: onOk} // Execute onOk callback when OK is clicked
        ],
    };

    // Call the modal function with the constructed options
    modal(modalOptions);
}

function alert(text, title) {
    modal({
        title: title,
        text: text, // Using 'text' here as we don't need input fields for a confirm dialog
        buttons: [
            {align:'right', text:'OK'}
        ],
    });
}
